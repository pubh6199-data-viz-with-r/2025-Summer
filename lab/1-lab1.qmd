---
title: "Lab 1"
author: "Your Name"
date: "2025-XX-XX"
params:
  number: 1
  purpose: "The purpose of this assignment is to introduce you to data transformation using various verbs in `dplyr` and data tidying using various verbs in `tidyr`"
format: 
  html:
    toc: true
    toc-location: right
    theme: flatly
execute:
  echo: true
  warning: false
  message: false
---


```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(
    warning = FALSE,
    message = FALSE,
    fig.path = "figs/",
    fig.width = 7.252,
    fig.height = 4,
    comment = "#>",
    fig.retina = 3
)
```

## Before your start the lab notebook

- Update the header - put your name in the `author` argument and put today's date in the `date` argument.
- Click the "Render" button in RStudio and then open the rendered `1-lab1.html` page.
- Then go back and try changing the `theme` argument in the header to something else - you can see other available themes [here](https://quarto.org/docs/output-formats/html-themes.html). Notice the difference when you render now!

## Overview of Lab1

There are two parts of this lab notebook. In first part, we will practice data transformation using the built-in dataset from the `{nycflights13}` package. In the second part, we will practice data tidying using both a synthetic data and the built-in dataset from the `{gapminder}` package.

**Skills practiced**:

- Use key `dplyr` verbs to manipulate and summarize data
- Use `pivot_longer()` to tidy untidy data
- Apply these skills in the context of climate and public health data


### Load Required Packages

```{r}
library(tidyverse)
library(nycflights13)
library(gapminder)
data(flights)
?flights
data(gapminder)
?gapminder
```

## Part 1: Data Transformation with `dplyr`

### Example Walkthrough

Letâ€™s explore one example for each type of `dplyr` operation â€” row, column, and group â€” using the `flights` dataset.

#### Row Operations

What flights are on January 1st?

```{r}
# filter(): Flights on January 1st
flights %>% 
  filter(month == 1, day == 1)
```

Which flights have the worst departure delay?

```{r}
# arrange(): Flights ordered by descending departure delay
flights %>% 
  arrange(desc(dep_delay))
```

Where do flights between NYC (i.e. JFK, LGA or EWR) take you?

```{r}
# distinct(): Unique origin-destination pairs
flights %>% 
  select(origin, dest) %>% 
  distinct()
```

#### Column Operations

Only keep relevant columns.

```{r}
# select(): Keep only flight number and delays
flights %>% 
  select(flight, arr_delay, dep_delay)
```

Rename `arr_delay` to `arrival_delay`.

```{r}
# rename(): Rename arr_delay to arrival_delay
flights %>% 
  rename(arrival_delay = arr_delay)
```

Calculate the total delay as the sum of arrival delay and departure delay.

Common mistake:

```{r eval = FALSE}
# What is wrong with this code?
flights %>% 
  mutate(total_delay = arrival_delay + dep_delay)
```

Correct solution: 

```{r}
# mutate(): Add a column for total delay
flights %>% 
  mutate(total_delay = arr_delay + dep_delay)
```

#### ðŸ”— Group Operations

What is the average delay by carrier?

```{r}
# group_by() + summarize(): Average delay by carrier
flights %>% 
  group_by(carrier) %>% 
  summarize(avg_delay = mean(arr_delay, na.rm = TRUE))
```

For each destination, what is the most delayed flight?

```{r}
# slice_max(): Most delayed flight by destination
flights %>% 
  group_by(dest) %>% 
  slice_max(order_by = arr_delay, n = 1, with_ties = FALSE)
```

Which airline carriers had the highest average arrival delays, and how do they compare overall? What if I want to keep all the rows for further data manipulation?

```{r}
# ungroup(): Remove grouping structure
flights %>% 
  group_by(carrier) %>% 
  mutate(mean_delay = mean(arr_delay, na.rm = TRUE)) %>% 
  ungroup() %>% 
  arrange(desc(mean_delay))
```

#### Chaining Multiple Verbs Together

Which airlines had the highest average total delay (arrival delay and departure delay) on January 1st?

```{r}
# Combine: filter â†’ arrange â†’ mutate â†’ group_by â†’ summarize
flights %>% 
  filter(month == 1, day == 1) %>% 
  arrange(desc(dep_delay)) %>% 
  mutate(total_delay = arr_delay + dep_delay) %>% 
  group_by(carrier) %>% 
  summarize(avg_delay = mean(total_delay, na.rm = TRUE))
```

---

### Practice: Data Transformation

Use the `gapminder` dataset to answer the following questions:

**How does the average life expectancy differ across continents in 2007?**

```{r}
# Your code here
```

::: {.callout-note title="Your Answer"}

:::


**Which country had the highest life expectancy in each continent in 2007, and how much did it exceed the global benchmark of 60 years?**

```{r}
# Your code here
```

::: {.callout-note title="Your Answer"}

:::

**Which countries experienced the largest gain in life expectancy between 1952 and 2007?**

```{r}
# Your code here
```

::: {.callout-note title="Your Answer"}

:::


## Part 2: Tidying Data with `pivot_longer()`

### Example: Climate Data

Weâ€™ll start by tidying a simulated climate dataset.

```{r}
n_row = 10
climate_raw <- tibble(
  id = 1:n_row,
  date = rep(seq(as.Date("2022-07-01"), by = "1 day", length.out = n_row/2), 2),
  city = rep(c("Phoenix", "Miami"), each = n_row/2),
  zone = rep(c("urban", "coastal"), each = n_row/2),
  temp_morning = sample(75:90, n_row, replace = TRUE),
  temp_afternoon = sample(95:112, n_row, replace = TRUE),
  humid_morning = sample(15:90, n_row, replace = TRUE),
  humid_afternoon = sample(10:80, n_row, replace = TRUE)
)

head(climate_raw)
```

Using `pivot_linger()`, we can tidy the dataset by transforming the wide format into a long format. This is useful for data analysis and visualization.

```{r}
climate_tidy <- climate_raw %>% 
  pivot_longer(cols = starts_with(c("temp", "humid")),
               names_to = c("variable", "time"),
               names_sep = "_") %>%
  pivot_wider(names_from = variable, values_from = value)

head(climate_tidy)
```


### Practice: Tidying Data using `gapminder` data

Sometimes the tidy data is the wide format. For example, if we want to calculate the difference between the life expectancy in 1952 and 2007, we can create a wide version of the `gapminder` dataset.

```{r}
# Your code here
# gap_wide <-
```

Now imagine for a different task the long format of the data is better for the analytical task. Use `pivot_longer()` to return this `gap_wider` to long format. Expected columns are `country`, `continent`, `year`, `lifeExp`.

```{r}
# Your code here
```


## Save and Push Your Work

Remember to save your `.qmd` and render the HTML output before committing to GitHub.

```{bash eval = FALSE}
git add 1-lab1.qmd 1-lab1.html
git commit -m "Complete Lab 1"
git push
```

